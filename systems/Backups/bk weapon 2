# systems/weapon_manager.py
from entities.weapons.granada import Granada
from entities.weapons.misil import Misil
import pickle
import time
import pygame

class WeaponManager:
    def __init__(self, game):
        self.game = game

    def disparar(self):
        # üö´ Bloquear disparo si no es tu turno o est√°s en cooldown
        if (
            self.game.turn_manager.jugador_actual() != self.game.nombre_jugador
            or self.game.turn_manager.en_cooldown
        ):
            print(f"[DEBUG] {self.game.nombre_jugador} intent√≥ disparar fuera de turno.")
            return


        origen, vel_x, vel_y = self.game.aim.get_datos_disparo()
        shooter = self.game.nombre_jugador  # due√±o local

        if self.game.robot.arma_equipada == 'granada':
            ancho, alto = Granada.ANCHO, Granada.ALTO
            origen, vel_x, vel_y = self.game.aim.get_datos_disparo(ancho, alto)
            g = Granada(origen[0], origen[1], vel_x, vel_y)
            g.owner = shooter
            self.game.granadas.append(g)

            data = {
                "tipo": "disparo",
                "jugador": self.game.nombre_jugador,
                "arma": self.game.robot.arma_equipada,
                "x": origen[0],
                "y": origen[1],
                "dir_x": vel_x,
                "dir_y": vel_y,
            }
            try:
                self.game.sock.sendto(pickle.dumps(data), (self.game.server_ip, self.game.port))
            except Exception as e:
                print(f"[ERROR enviar disparo] {e}")

        elif self.game.robot.arma_equipada == 'misil':
            ancho, alto = Misil.ANCHO, Misil.ALTO
            origen, vel_x, vel_y = self.game.aim.get_datos_disparo(ancho, alto)
            m = Misil(origen[0], origen[1], vel_x, vel_y)
            m.owner = shooter
            self.game.misiles.append(m)

            data = {
                "tipo": "disparo",
                "jugador": self.game.nombre_jugador,
                "arma": self.game.robot.arma_equipada,
                "x": origen[0],
                "y": origen[1],
                "dir_x": vel_x,
                "dir_y": vel_y,
            }
            try:
                self.game.sock.sendto(pickle.dumps(data), (self.game.server_ip, self.game.port))
            except Exception as e:
                print(f"[ERROR enviar disparo] {e}")
                

        # ‚úÖ Si llegamos aqu√≠, el disparo es v√°lido ‚Üí se acaba el turno
        if self.game.turn_manager.jugador_actual() == self.game.nombre_jugador:
            # üöÄ Detener movimiento inmediatamente
            self.game.robot.vel_x = 0
            self.game.robot.current_animation = "idle"
    
            # üöÄ Resetear input para que no quede corriendo/saltando
            pygame.event.clear([pygame.KEYDOWN, pygame.KEYUP])
            keys = pygame.key.get_pressed()
            self.game.robot.update([])     # forzar actualizaci√≥n sin teclas

            data = {"tipo": "turno_fin", "jugador": self.game.nombre_jugador}
            try:
                self.game.sock.sendto(pickle.dumps(data), (self.game.server_ip, self.game.port))
            except Exception:
                pass

            if self.game.host:
                # Host: aplica l√≥gica de fin de turno
                self.game.turn_manager.forzar_fin_turno()
            else:
                # Cliente: entrar en cooldown local de inmediato
                self.game.turn_manager.en_cooldown = True
                self.game.turn_manager.cooldown_inicio = time.time()
                self.game.turn_manager.cooldown_restante_sync = self.game.turn_manager.cooldown
                

    def update(self):
        self._update_granadas()
        self._update_misiles()

    def draw(self, pantalla):
        for granada in self.game.granadas:
            granada.draw(pantalla)
        for misil in self.game.misiles:
            misil.draw(pantalla)

    # --- Granadas ---
    def _update_granadas(self):
        for granada in self.game.granadas[:]:
            granada.update(self.game.tiles, self.game.robot)
            for robot_estatico in self.game.robots_estaticos:

                # ‚ùå saltar si este robot es el due√±o del misil
                if robot_estatico.nombre_jugador == granada.owner:
                    continue

                granada.rebote_con_robot(robot_estatico)
                if granada.explotado and granada.estado == "explode":
                    if robot_estatico not in granada.danados and granada.get_hitbox().colliderect(robot_estatico.get_rect()):
                        da√±o = 70
                        puntos = da√±o
                        if robot_estatico.health - da√±o <= 0:  # va a morir con este golpe
                            puntos = da√±o * 2

                        #self.aplicar_dano(robot_estatico, 70) #robot_estatico.take_damage(70)
                        #self.enviar_evento_puntaje(granada.owner, puntos, robot_estatico) 
                        if self.game.host:
                            # ‚úÖ Solo el host aplica el da√±o y suma puntaje
                            self.aplicar_dano(robot_estatico, 70)
                            self.enviar_evento_puntaje(granada.owner, puntos, robot_estatico)
                        granada.danados.add(robot_estatico)

            if not granada.explotado:
                granada.rebote_con_tiles(self.game.tiles)
                granada.rebote_con_robot(self.game.robot)
            elif granada.explotado and granada.estado == "explode" and not granada.ya_hizo_dano:
                # SOLO me pego da√±o local si YO soy el due√±o del proyectil
                if getattr(granada, "owner", self.game.nombre_jugador) == self.game.nombre_jugador:
                    if granada.get_hitbox().colliderect(self.game.robot.get_rect()):
                        self.game.robot.take_damage(70)
                        granada.ya_hizo_dano = True

            if granada.estado == "done":
                self.game.granadas.remove(granada)

    # --- Misiles ---
    def _update_misiles(self):
        for misil in self.game.misiles[:]:
            misil.update(self.game.tiles, self.game.robot)
            for robot_estatico in self.game.robots_estaticos:

                # ‚ùå saltar si este robot es el due√±o del misil
                if robot_estatico.nombre_jugador == misil.owner:
                    continue

                misil.colisiona_con_robot(robot_estatico)
                if misil.explotado and misil.estado == "explode":
                    if robot_estatico not in misil.danados and misil.get_hitbox().colliderect(robot_estatico.get_rect()):
                        da√±o = 50
                        puntos = da√±o
                        if robot_estatico.health - da√±o <= 0:  # va a morir con este golpe
                            puntos = da√±o * 2
                            
                        if self.game.host:
                            self.aplicar_dano(robot_estatico, 50) #robot_estatico.take_damage(50)
                            self.enviar_evento_puntaje(misil.owner, puntos, robot_estatico)
                        misil.danados.add(robot_estatico)

            if not misil.explotado:
                misil.colisiona_con_tiles(self.game.tiles)
                misil.colisiona_con_robot(self.game.robot)
            elif misil.explotado and misil.estado == "explode" and not misil.ya_hizo_dano:
                # SOLO me pego da√±o local si YO soy el due√±o del proyectil
                if getattr(misil, "owner", self.game.nombre_jugador) == self.game.nombre_jugador:
                    if misil.get_hitbox().colliderect(self.game.robot.get_rect()):
                        self.game.robot.take_damage(50)
                        misil.ya_hizo_dano = True

            if misil.estado == "done":
                self.game.misiles.remove(misil)

    def aplicar_dano(self, robot, cantidad):
        if self.game.host:
            # Solo el host aplica directamente
            robot.take_damage(cantidad)

            # Y luego notifica a los dem√°s
            msg = {
                "tipo": "damage",
                "jugador": robot.nombre_jugador,  # üî• clave igual a la que ya usas en listen
                "cantidad": cantidad,
                "quien": self.game.nombre_jugador
            }
            for client in list(self.game.known_clients):
                try:
                    self.game.sock.sendto(pickle.dumps(msg), client)
                except Exception:
                    pass
        else:
            # Cliente: no aplica, solo reporta al host
            if robot.es_remoto:
                self.game.enviar_dano(robot.nombre_jugador, cantidad)

    def recibir_disparo_remoto(self, msg):
        jugador = msg.get("jugador")
        if jugador == self.game.nombre_jugador:
            # Ignorar nuestros propios disparos (ya los creamos localmente)
            return

        arma = msg.get("arma")
        x, y = msg.get("x"), msg.get("y")
        dx, dy = msg.get("dir_x"), msg.get("dir_y")

        if arma == 'granada':
            g = Granada(x, y, dx, dy)
            g.owner = jugador
            self.game.granadas.append(g)
        elif arma == 'misil':
            m = Misil(x, y, dx, dy)
            m.owner = jugador
            self.game.misiles.append(m)

    def enviar_evento_puntaje(self, atacante, puntos, victima):
        msg = {
            "tipo": "score",
            "atacante": atacante,
            "puntos": puntos,
            "victima": victima.nombre_jugador,
            "victima_dead": victima.health <= 0
        }

        if self.game.host:
            # üî• si soy host, yo actualizo y reenv√≠o a todos
            self.game.puntajes[atacante] = self.game.puntajes.get(atacante, 0) + puntos

            # reenv√≠o a todos los clientes
            for client in list(self.game.known_clients):
                try:
                    self.game.sock.sendto(pickle.dumps(msg), client)
                except Exception:
                    pass
        else:
            # üöÄ si soy cliente, aviso al host que pas√≥ un puntaje
            try:
                self.game.sock.sendto(pickle.dumps(msg), (self.game.server_ip, self.game.port))
            except Exception:
                pass
